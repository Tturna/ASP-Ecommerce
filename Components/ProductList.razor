@using ASP_Ecommerce.Models.ViewModels
@using System.Security.Claims
@using ASP_Ecommerce.Models
@using ASP_Ecommerce.Models.Enums
@using ASP_Ecommerce.Services
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="flex-column gap-1">
    <div class="flex-row gap-1">
        @foreach (var topCategory in _categories.Where(c => c.Parent == null))
        {
            <button class="btn btn-small btn-tertiary@(topCategory.Id == _selectedTopCategory ? "": "-light")"
                    @onclick="() => { UpdateCategoryButtons(topCategory, 0); FilterVisibleProducts(topCategory); }">
                @topCategory.Name
            </button>
        }
    </div>
    @if (_subCategories != null)
    {
        <div class="flex-row gap-1">
            @foreach (var subCategory in _subCategories)
            {
                <button class="btn btn-small btn-tertiary@(subCategory.Id == _selectedSubCategory ? "": "-light")"
                        @onclick="() => { UpdateCategoryButtons(subCategory, 1); FilterVisibleProducts(subCategory); }">
                    @subCategory.Name
                </button>
            }
        </div>
    }
    @if (_subSubCategories != null)
    {
        <div class="flex-row gap-1">
            @foreach (var subCategory in _subSubCategories)
            {
                <button class="btn btn-small btn-tertiary@(subCategory.Id == _selectedSubSubCategory ? "": "-light")"
                        @onclick="() => { UpdateCategoryButtons(subCategory, 2); FilterVisibleProducts(subCategory); }">
                    @subCategory.Name
                </button>
            }
        </div>
    }
</div>

@if (_isOwner)
{
    <div class="add-product">
        <h3>Add Product</h3>

        @if (_message != string.Empty)
        {
            <p class="alert @_alertClass">@_message</p>
        }
        <EditForm Model="Model" OnValidSubmit="AddProduct" FormName="AddProduct">
            @* Antiforgery stuff is added by default? *@
            <DataAnnotationsValidator/>
            <ValidationSummary class="c-primary"/>
            <div class="add-product-row">
                <div>
                    <label>Product Name</label>
                    <InputText @bind-Value="Model.Name" class="rubik-strong-menu" />
                </div>
                <div>
                    <label>Short Description</label>
                    <InputText @bind-Value="Model.ShortDescription" class="rubik-strong-menu" />
                </div>
                <div>
                    <label>Price</label>
                    <InputNumber @bind-Value="Model.Price" class="rubik-strong-menu" />
                </div>
                <div>
                    <label>Old Price</label>
                    <InputNumber @bind-Value="Model.OldPrice" class="rubik-strong-menu" />
                </div>
            </div>
            <div class="add-product-row">
                <div>
                    <label>Category Path</label>
                    <InputText @bind-Value="Model.CategoryPath" class="rubik-strong-menu" />
                </div>
                <div>
                    <label>Image Url</label>
                    <InputText @bind-Value="Model.ImageUrl" class="rubik-strong-menu" />
                </div>
                <div>
                    <button type="submit" class="btn btn-small btn-primary">Add</button>
                </div>
            </div>
        </EditForm>
    </div>
}

<div class="product-list">
    @foreach(var product in _visibleProducts)
    {
        var averageRating = Math.Round(product.AverageRating ?? 0);
    
        <div class="product-card">
            <img src="@product.ImageUrl" class="product-card-img clickable" alt="@product.Name"
                 @onclick="@(() => Navigate($"/products/{product.Id}"))">
                 
            <div class="product-card-body">
                @if (product.Maintainer != null)
                {
                    <p class="rubik-strong-menu">@product.Maintainer.UserName</p>
                }
                
                <p class="rubik-regular">@product.Name</p>
                
                @if (ListType == ProductListType.Official)
                {
                    <div class="product-stars-price">
                        <div class="review-stars">
                            @for (var i = 0; i < 5; i++)
                            {
                                <img src="icons/star@(i < averageRating ? "" : "-outline").svg" alt="star">
                            }
                        </div>
                        @if (product.OldPrice != null)
                        {
                            <p class="old-price">@(product.OldPrice) €</p>
                        }
                        <p class="rubik-strong-menu">@(product.Price) €</p>
                    </div>
                }
                else
                {
                    <div class="price-row">
                        @if (product.OldPrice != null)
                        {
                            <p class="old-price">@(product.OldPrice) €</p>
                        }
                        <p class="rubik-strong-menu">@(product.Price) €</p>
                    </div>
                }
                
                @* <button onclick="addItemToCart(@product.Id)" class="btn btn-primary">Add to cart</button> *@
                
                @if (_isOwner)
                {
                    <button @onclick="@(() => DeleteProduct(@product.Id))" class="btn btn-primary">Delete</button>
                }
            </div>
        </div>
    }
</div>

@code {
    [SupplyParameterFromForm] private ProductModel Model { get; set; } = new();

    [Parameter] public ProductsViewModel InitialData { get; set; } = default!;

    [Parameter] public UserModel? OwnerMaintainer { get; set; }

    [Parameter] public ProductListType ListType { get; set; } = ProductListType.Undefined;

    private ProductModel[] _products = default!;
    private List<ProductModel> _visibleProducts = default!;
    private CategoryModel[] _categories = default!;
    private CategoryModel[]? _subCategories;
    private CategoryModel[]? _subSubCategories;
    private bool _isOwner;
    private string _message = string.Empty;
    private string _alertClass = string.Empty;
    private ClaimsPrincipal _principal = default!;
    private int? _selectedTopCategory;
    private int? _selectedSubCategory;
    private int? _selectedSubSubCategory;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (InitialData == null)
        {
            throw new ArgumentNullException(nameof(InitialData), "ProductsViewModel must be passed to the component.");
        }

        if (ListType == ProductListType.Undefined)
        {
            throw new ArgumentException("ListType must be defined.", nameof(ListType));
        }

        _products = InitialData.Products;
        _visibleProducts = _products.ToList();
        _categories = InitialData.Categories;
        _principal = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User;

        _isOwner = ListType switch
        {
            ProductListType.Official => _principal.IsInRole("Admin"),
            ProductListType.Individual => OwnerMaintainer != null && OwnerMaintainer?.UserName == _principal.Identity?.Name,
            _ => false
        };
    }


    private async Task AddProduct()
    {
        // Product adding is done here because a controller would require a separate request
        // which wouldn't be a problem if HttpClient included the Identity cookie.
        // It can probably be added manually but it's not worth the effort rn. CBA.
        try
        {
            // TODO: Fix bug where the first product that a maintainer adds goes to the official products
            if (OwnerMaintainer != null)
            {
                var user = DbContext.Users.First(u => u.UserName == _principal.Identity!.Name);
                Model.Maintainer = user;
                Model.MaintainerId = user.Id;
            }

            var categoryNames = Model.CategoryPath.Split('/').Where(cn => cn.Length > 0).ToArray();
            List<CategoryModel> categories = [];
            var allCategories = DbContext.Categories
                .Include(c => c.Parent)
                .ToList();

            for (var i = 0; i < categoryNames.Length; i++)
            {
                var categoryName = categoryNames[i];
                var parentCategory = i > 0 ? categories.ElementAtOrDefault(i - 1) : null;
                var category = allCategories
                    .FirstOrDefault(c =>
                        c.Name == categoryName &&
                        (parentCategory == null || c.Parent?.Name == parentCategory.Name));

                if (category == null)
                {
                    category = new CategoryModel
                    {
                        Name = categoryName,
                        Parent = parentCategory
                    };

                    await DbContext.Categories.AddAsync(category);
                }

                categories.Add(category);
            }

            var mostSpecificCategory = categories.LastOrDefault();
            Model.Category = mostSpecificCategory;

            await DbContext.Products.AddAsync(Model);
            await DbContext.SaveChangesAsync();
            _products = _products.Append(Model).ToArray();
            Model = new ProductModel();
            _message = "Product added successfully!";
            _alertClass = "c-tertiary";
        }
        catch (Exception e)
        {
            _message = e.Message;
            _alertClass = "c-primary";
        }
    }

    private async Task DeleteProduct(int id)
    {
        // This might be unnecessary as the button may be able to just pass the tracked product directly to the method.
        var targetProduct = DbContext.Products.First(p => p.Id == id);

        var confirmed = await JsRuntime.InvokeAsync<bool>(
            "confirm",
            $"Are you sure you want to delete {targetProduct.Name}?");

        if (!confirmed) return;

        try
        {
            DbContext.Products.Remove(targetProduct);
            _products = _products.Where(p => p.Id != id).ToArray();
            await DbContext.SaveChangesAsync();
            _message = "Product deleted successfully!";
            _alertClass = "alert-success";
        }
        catch (Exception e)
        {
            _message = e.Message;
            _alertClass = "alert-danger";
        }
    }

    private void Navigate(string path)
    {
        NavigationManager.NavigateTo(path, forceLoad: true);
    }

    private void UpdateCategoryButtons(CategoryModel category, int lvl)
    {
        switch (lvl)
        {
            case 0:
                _subCategories = _categories.Where(c => c.ParentId == category.Id).ToArray();
                _subSubCategories = null;
                _selectedTopCategory = category.Id;
                _selectedSubCategory = null;
                _selectedSubSubCategory = null;
                break;
            case 1:
                _subSubCategories = _categories.Where(c => c.ParentId == category.Id).ToArray();
                _selectedSubCategory = category.Id;
                _selectedSubSubCategory = null;
                break;
            case 2:
                _selectedSubSubCategory = category.Id;
                break;
        }
    }

    private void FilterVisibleProducts(CategoryModel category)
    {
        _visibleProducts.Clear();
        
        foreach (var product in _products)
        {
            var productCategory = _categories.First(c => c.Id == product.CategoryId);
            
            if (productCategory.Id == category.Id ||
                productCategory.ParentId == category.Id ||
                productCategory.Parent?.Id == category.Id)
            {
                _visibleProducts.Add(product);
            }
        }
    }
}