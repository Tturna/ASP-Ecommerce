@using ASP_Ecommerce.Models
@using ASP_Ecommerce.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext

@if (_message != string.Empty)
{
    <p class="alert @_alertClass">@_message</p>
}

@if (!_isOwner)
{
    <p><strong>@ProductData.CategoryPath</strong></p>
    <div class="product-main-block">
        <img src="@ProductData.ImageUrl" alt="@ProductData.Name" class="">
        <div class="product-main-text">
            <h1 class="rubik-mono-one-regular">@ProductData.Name</h1>
            <div class="review-stars">
                @for (var i = 0; i < 5; i++)
                {
                    <img src="icons/star@(i < _averageRating ? "" : "-outline").svg" alt="star">
                }
            </div>
            <p>@ProductData.ShortDescription</p>
            <div class="product-price-cart">
                @if (ProductData.OldPrice != null && ProductData.OldPrice != 0)
                {
                    <p class="old-price">@(ProductData.OldPrice) €</p>
                }
                <h2 class="">@(ProductData.Price) €</h2>
                <button onclick="addItemToCart(@ProductData.Id)" class="btn btn-primary">Add to cart</button>
            </div>
        </div>
    </div>
    
    <div class="product-descriptions">
        <h2>Product description</h2>
        <p>@Model.LongDescription</p>
        <h2>Technical specification</h2>
        <p>@Model.TechDescription</p>
        <h2>Warranty information</h2>
        <p>@Model.WarrantyDescription</p>
    </div>
}
else
{
    <EditForm Model="Model" OnValidSubmit="EditProduct" FormName="EditProductForm">
        <ValidationSummary />
        <div class="">
            <label class="">Image URL</label>
            <InputText @bind-Value="Model.ImageUrl" class=""/>
        </div>
        <div class="">
            <label class="">Name</label>
            <InputText @bind-Value="Model.Name" class=""/>
        </div>
        <div class="">
            <label class="">Short description</label>
            <InputText @bind-Value="Model.ShortDescription" class=""/>
        </div>
        <div class="">
            <label class="">Price</label>
            <InputNumber @bind-Value="Model.Price" class=""/>
        </div>
        <div class="">
            <label class="">Old Price</label>
            <InputNumber @bind-Value="Model.OldPrice" class=""/>
        </div>
        <div class="">
            <label class="">Long description</label>
            <InputText @bind-Value="Model.LongDescription" class=""/>
        </div>
        <div class="">
            <label class="">Technical description</label>
            <InputText @bind-Value="Model.TechDescription" class=""/>
        </div>
        <div class="">
            <label class="">Warranty description</label>
            <InputText @bind-Value="Model.WarrantyDescription" class=""/>
        </div>
        <button type="submit" class="">Save</button>
    </EditForm>
}
<hr/>

<ReviewList ProductId="@ProductData.Id" />

@code {
    [SupplyParameterFromForm]
    public ProductModel Model { get; set; } = new();

    [Parameter]
    public ProductModel ProductData { get; set; } = default!;

    private string _message = string.Empty;
    private string _alertClass = string.Empty;
    private bool _isOwner;
    private double _averageRating;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Model = ProductData ??
                throw new ArgumentNullException(nameof(ProductData), "ProductData must be passed to the component");

        var principal = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User;
        var isOfficialProduct = ProductData.Maintainer == null;

        _isOwner = (!isOfficialProduct && ProductData.Maintainer!.UserName == principal.Identity?.Name) ||
                   (isOfficialProduct && principal.IsInRole("Admin"));
        
        _averageRating = Math.Round(ProductData.AverageRating ?? 0);
    }

    private void EditProduct()
    {
        var targetProduct = DbContext.Products.First(p => p.Id == ProductData.Id);

        targetProduct.ImageUrl = Model.ImageUrl;
        targetProduct.Name = Model.Name;
        targetProduct.ShortDescription = Model.ShortDescription;
        targetProduct.Price = Model.Price;
        targetProduct.OldPrice = Model.OldPrice;
        targetProduct.LongDescription = Model.LongDescription;
        targetProduct.TechDescription = Model.TechDescription;
        targetProduct.WarrantyDescription = Model.WarrantyDescription;

        try
        {
            DbContext.SaveChanges();
            _message = "Product updated successfully";
            _alertClass = "alert-success";
        }
        catch (Exception e)
        {
            _message = $"An error occurred: {e.Message}";
            _alertClass = "alert-danger";
        }
    }

}